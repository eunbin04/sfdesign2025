# -*- coding: utf-8 -*-
"""상관관계 분석

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iC_Bx-qsP7zPDJYPl5pXCopAmFfI0p89

# 예시 데이터
"""

!pip install -q koreanize-matplotlib
import koreanize_matplotlib

!wget -O exdata.csv 'https://raw.githubusercontent.com/eunbin04/sfdesign2025/main/exdata.csv'

import pandas as pd

# CSV 파일 읽기
df = pd.read_csv("exdata.csv", index_col=0)

# 데이터 확인
display(df.head())

import matplotlib.pyplot as plt

fig, ax1 = plt.subplots(figsize=(20, 6)) # 크기 조정

ax1.plot(df.index, df['temperature'], label='기온', color='tomato')
ax1.set_xlabel('날짜')
ax1.set_ylabel('기온 (℃)', color='tomato')
ax1.tick_params(axis='y', labelcolor='tomato')

ax2 = ax1.twinx()
ax2.plot(df.index, df['humidity'], label='습도', color='dodgerblue')
ax2.set_ylabel('습도 (%)', color='dodgerblue')
ax2.tick_params(axis='y', labelcolor='dodgerblue')

ax3 = ax2.twinx()
ax3.plot(df.index, df['light'], label='광', color='green')
ax3.set_ylabel('광', color='green')
ax3.tick_params(axis='y', labelcolor='green')

ax4 = ax3.twinx()
ax4.plot(df.index, df['co2'], label='CO2', color='orange')
ax4.set_ylabel('CO2', color='orange')
ax4.tick_params(axis='y', labelcolor='orange')

ax1.set_title('환경데이터')
fig.legend(loc="upper right", bbox_to_anchor=(0.1, 0.9))

plt.show()

"""# 혁신벨리 데이터"""

!wget -O hyeoksindata.xlsx 'https://raw.githubusercontent.com/eunbin04/sfdesign2025/main/hyeoksindata.xlsx'

import pandas as pd

df = pd.read_excel("hyeoksindata.xlsx")

display(df.head())

df = df.iloc[2:].reset_index(drop=True)
display(df.head())

column_rename_map = {
    '수집일': 'date_time',
    '내부-내부CO2': 'CO2',
    '내부-내부습도': 'humidity',
    '외부-외부일사량': 'light',
    '외부-외부온도': 'external_temperature',
    '내부-내부온도': 'internal_temperature',
}

df.rename(columns=column_rename_map, inplace=True)

display(df.head())

df.to_csv("clean_hyeoksindata.csv", index=False)

import pandas as pd

df = pd.read_csv("clean_hyeoksindata.csv", index_col=0)

display(df.head())

import matplotlib.pyplot as plt

fig, ax1 = plt.subplots(figsize=(20, 6)) # 크기 조정

ax1.plot(df.index, df['internal_temperature'], label='내부온도', color='tomato')
ax1.set_xlabel('날짜')
ax1.set_ylabel('내부온도 (℃)', color='tomato')
ax1.tick_params(axis='y', labelcolor='tomato')

ax2 = ax1.twinx()
ax2.plot(df.index, df['humidity'], label='습도', color='dodgerblue')
ax2.set_ylabel('습도 (%)', color='dodgerblue')
ax2.tick_params(axis='y', labelcolor='dodgerblue')

ax3 = ax2.twinx()
ax3.plot(df.index, df['light'], label='광', color='green')
ax3.set_ylabel('광', color='green')
ax3.tick_params(axis='y', labelcolor='green')

ax4 = ax3.twinx()
ax4.plot(df.index, df['CO2'], label='CO2', color='orange')
ax4.set_ylabel('CO2', color='orange')
ax4.tick_params(axis='y', labelcolor='orange')

ax1.set_title('혁신벨리 환경데이터')
fig.legend(loc="upper right", bbox_to_anchor=(0.1, 0.9))

plt.show()

"""## 상관관계 분석"""

import matplotlib.pyplot as plt

plt.figure(figsize=(20, 6))

plt.plot(df.index, df['external_temperature'], label='외부온도', color='skyblue')
plt.plot(df.index, df['internal_temperature'], label='내부온도', color='tomato')

plt.xlabel('날짜')
plt.ylabel('온도 (℃)')
plt.title('외부 온도와 내부 온도 변화 추세')
plt.legend()
plt.show()

"""### CO2와 내부온도"""

# 'CO2'와 'internal_temperature' 열 선택
co2_intemp_df = df[['CO2', 'internal_temperature']]

# 상관계수 계산
correlation = co2_intemp_df['CO2'].corr(co2_intemp_df['internal_temperature'])

print(f"CO2와 내부온도 사이의 상관계수: {correlation:.4f}")

import matplotlib.pyplot as plt
import numpy as np

# 산점도 그리기
plt.figure(figsize=(10, 6))
plt.scatter(df['CO2'], df['internal_temperature'], alpha=0.5)

# 추세선 추가
# CO2와 internal_temperature 값을 숫자로 변환
co2_numeric = pd.to_numeric(df['CO2'])
temp_numeric = pd.to_numeric(df['internal_temperature'])

# 유효한(NaN이 아닌) 값들만 선택하여 회귀선 계산
valid_indices = co2_numeric.notna() & temp_numeric.notna()
co2_valid = co2_numeric[valid_indices]
temp_valid = temp_numeric[valid_indices]

# 선형 회귀 모델 피팅
m, b = np.polyfit(co2_valid, temp_valid, 1)
# 추세선 그리기
plt.plot(co2_valid, m * co2_valid + b, color='red', label=f'선형 추세선')

# 2차 다항 회귀 모델 피팅
p2 = np.polyfit(co2_valid, temp_valid, 2)
poly2 = np.poly1d(p2)
# CO2 값의 범위를 정렬하여 부드러운 곡선 그리기
co2_sorted = np.sort(co2_valid)
plt.plot(co2_sorted, poly2(co2_sorted), color='green', label=f'2차 곡선 추세선')


plt.xlabel('CO2')
plt.ylabel('내부온도 (℃)')
plt.title('CO2와 내부온도')
plt.grid(True)
plt.legend()
plt.show()

"""### CO2와 외부온도"""

co2_extemp_df = df[['CO2', 'external_temperature']]

correlation2 = co2_extemp_df['CO2'].corr(co2_extemp_df['external_temperature'])

print(f"CO2와 내부온도 사이의 상관계수: {correlation2:.4f}")

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(10, 6))
plt.scatter(df['CO2'], df['external_temperature'], alpha=0.5)

co2_numeric = pd.to_numeric(df['CO2'])
temp_numeric = pd.to_numeric(df['external_temperature'])

valid_indices = co2_numeric.notna() & temp_numeric.notna()
co2_valid = co2_numeric[valid_indices]
temp_valid = temp_numeric[valid_indices]

# 선형 회귀 모델
m, b = np.polyfit(co2_valid, temp_valid, 1)

plt.plot(co2_valid, m * co2_valid + b, color='red', label=f'선형 추세선')

# 2차 다항 회귀 모델
p2 = np.polyfit(co2_valid, temp_valid, 2)
poly2 = np.poly1d(p2)

co2_sorted = np.sort(co2_valid)
plt.plot(co2_sorted, poly2(co2_sorted), color='green', label=f'2차 곡선 추세선')


plt.xlabel('CO2')
plt.ylabel('외부온도 (℃)')
plt.title('CO2와 외부온도')
plt.grid(True)
plt.legend()
plt.show()

"""### CO2와 외부일사량"""

co2_light_df = df[['CO2', 'light']]

correlation3 = co2_light_df['CO2'].corr(co2_light_df['light'])

print(f"CO2와 외부일사량 사이의 상관계수: {correlation3:.4f}")

# 외부일사량이 0이 아닌 데이터만 선택
filtered_df = df[df['light'] != 0].copy()

# 필터링된 데이터프레임에서 'CO2'와 'light' 열 선택
co2_light_df = filtered_df[['CO2', 'light']]

# 상관계수 계산
correlation3_filtered = co2_light_df['CO2'].corr(co2_light_df['light'])

print(f"외부일사량이 0이 아닌 경우 CO2와 광 사이의 상관계수: {correlation3_filtered:.4f}")

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(10, 6))
plt.scatter(filtered_df['CO2'], filtered_df['light'], alpha=0.5)

co2_numeric = pd.to_numeric(filtered_df['CO2'])
temp_numeric = pd.to_numeric(filtered_df['light'])

valid_indices = co2_numeric.notna() & temp_numeric.notna()
co2_valid = co2_numeric[valid_indices]
temp_valid = temp_numeric[valid_indices]

# 선형 회귀 모델
m, b = np.polyfit(co2_valid, temp_valid, 1)

plt.plot(co2_valid, m * co2_valid + b, color='red', label=f'선형 추세선')

# 2차 다항 회귀 모델
p2 = np.polyfit(co2_valid, temp_valid, 2)
poly2 = np.poly1d(p2)

co2_sorted = np.sort(co2_valid)
plt.plot(co2_sorted, poly2(co2_sorted), color='green', label=f'2차 곡선 추세선')


plt.xlabel('CO2')
plt.ylabel('외부일사량')
plt.title('CO2와 외부일사량')
plt.grid(True)
plt.legend()
plt.show()

"""### CO2와 습도"""

co2_humidity_df = df[['CO2', 'humidity']]

correlation4 = co2_humidity_df['CO2'].corr(co2_humidity_df['humidity'])

print(f"CO2와 습도 사이의 상관계수: {correlation4:.4f}")

import matplotlib.pyplot as plt
import numpy as np

plt.figure(figsize=(10, 6))
plt.scatter(df['CO2'], df['humidity'], alpha=0.5)

co2_numeric = pd.to_numeric(df['CO2'])
temp_numeric = pd.to_numeric(df['humidity'])

valid_indices = co2_numeric.notna() & temp_numeric.notna()
co2_valid = co2_numeric[valid_indices]
temp_valid = temp_numeric[valid_indices]

# 선형 회귀 모델
m, b = np.polyfit(co2_valid, temp_valid, 1)

plt.plot(co2_valid, m * co2_valid + b, color='red', label=f'선형 추세선')

# 2차 다항 회귀 모델
p2 = np.polyfit(co2_valid, temp_valid, 2)
poly2 = np.poly1d(p2)

co2_sorted = np.sort(co2_valid)
plt.plot(co2_sorted, poly2(co2_sorted), color='green', label=f'2차 곡선 추세선')


plt.xlabel('CO2')
plt.ylabel('습도 (%)')
plt.title('CO2와 습도')
plt.grid(True)
plt.legend()
plt.show()

"""## 결론"""

print(f"CO2와 내부온도 사이의 상관계수: {correlation:.4f}")
print(f"CO2와 외부온도 사이의 상관계수: {correlation2:.4f}")
print(f"외부일사량이 0이 아닌 경우 CO2와 광 사이의 상관계수: {correlation3_filtered:.4f}")
print(f"CO2와 습도 사이의 상관계수: {correlation4:.4f}")